?otu_table
otu_table(ITS.rare) <- otu_table(otu, taxa_are_rows=TRUE)
ITS.rare
otu <- otu_table(ITS.rare)
tail(otu[,1:10])
NAPU4 <- plants.prune$NAPU4[match(as.numeric(sub("F_GCE","",colnames(otu))), rownames(plants.prune))]
otu <- rbind(otu, NAPU4)
ITS.rare
otu_table(ITS.rare) <- otu_table(otu, taxa_are_rows=TRUE)
ITS.rare
dim(otu)
otu_table(otu, taxa_are_rows=TRUE)
class(otu_table(otu, taxa_are_rows=TRUE))
dim(otu_table(otu, taxa_are_rows=TRUE))
ITS.rare
otu_table(ITS.rare) <- otu_table(otu, taxa_are_rows=TRUE)
ITS.rare
?phyloseq
ITS.rare <- phyloseq(otu_table(otu, taxa_are_rows=TRUE), sample_data(ITS.rare), tax_table(ITS.rare))
ITS.rare
dim(otu)
ITS.rare <- phyloseq(otu_table(otu, taxa_are_rows=TRUE), sample_data(ITS.rare), tax_table(ITS.rare))
dim(otu_table(otu, taxa_are_rows=TRUE))
ITS.rare <- phyloseq(otu_table(otu, taxa_are_rows=TRUE), sample_data(ITS.rare), tax_table(ITS.rare))
ITS.rare
ITS.rare <- phyloseq(otu_table(otu, taxa_are_rows=TRUE), sample_data(ITS.rare))
ITS.rare
ITS.filter <- filter_taxa(ITS.rare, function(x) sum(x > 0) > (0.2*length(x)), TRUE)
ITS.filter
rownames(otu_table(ITS.rare))
print(paste("Started at", Sys.time()))
require('phyloseq')
require('reshape2')
require('dplyr')
require('boral')
correct_batch_means <- function(sample_data, colrange, col.batch) {
global.means <- apply(sample_data[,colrange], 2, mean, na.rm=TRUE)
for(i in 1:4) {
ind <- which(sample_data[,col.batch]==i)
batch.means <- apply(sample_data[ind,colrange], 2, mean, na.rm=TRUE)
mean.diffs <- global.means - batch.means
colrange.numeric <- match(colrange, names(sample_data))
for(j in colrange.numeric) {
sample_data[which(sample_data[,col.batch]==i),j] <- sample_data[which(sample_data[,col.batch]==i),j] + mean.diffs[j-min(colrange.numeric)+1]
}
}
sample_data
}
###################
#  Load ITS Data  #
###################
# Load data via phyloseq
ITS <- import_biom("otu_table_wTax_ITS.biom",parseFunction=parse_taxonomy_greengenes)
sampleDataITS <- import_qiime_sample_data("mapping_file_ITS.txt")
# Convert between int and factors where necessary
sampleDataITS$treatment.group <- as.factor(sampleDataITS$treatment.group)
sampleDataITS$n <- as.factor(sampleDataITS$n)
sampleDataITS$co2 <- as.factor(sampleDataITS$co2)
sampleDataITS$heat <- as.factor(sampleDataITS$heat)
sampleDataITS$precip <- as.factor(sampleDataITS$precip)
sampleDataITS$perc.N <- as.numeric(as.character(sampleDataITS$perc.N))
sampleDataITS$perc.C <- as.numeric(as.character(sampleDataITS$perc.C))
sampleDataITS$plant.P.content <- as.numeric(as.character(sampleDataITS$plant.P.content))
sampleDataITS$CE.batch <- as.factor(sampleDataITS$CE.batch)
# Correct for CE batches
col1 <- which(names(sampleDataITS)=="perc.N")
col2 <- which(names(sampleDataITS)=="C.N")
colrange <- names(sampleDataITS)[col1:col2]
col3 <- which(names(sampleDataITS)=="CE.batch")
sampleDataITS <- correct_batch_means(sampleDataITS, colrange, col3)
# Incorporate sampleData
sample_data(ITS) <- sampleDataITS
rm(sampleDataITS)
# Include functional guilds
funguild <- read.csv("guilds.csv", header=TRUE)
# Create final columns in tax_table to reflect Trophic Mode and Functional Guild
#tax_table(ITS)[,8] <- tax_table(ITS)[,6]=="Glomus"
tax_table(ITS)[,8] <- as.character(funguild$Trophic.Mode[match(rownames(tax_table(ITS)),funguild$X.OTU.ID)])
tax_table(ITS) <- cbind(tax_table(ITS), as.character(funguild$Guild[match(rownames(tax_table(ITS)),funguild$X.OTU.ID)]))
colnames(tax_table(ITS))[8:9] <- c("Trophic.Mode","Guild")
# Remove GCE70 because it contained two missing values (perc.N and perc.C)
rm.ind <- which(rownames(sample_data(ITS))=="F_GCE70")
sample_data(ITS) <- sample_data(ITS)[-rm.ind,]
# Remove low-abundance taxa and poorly-classified taxa
ITS.prune <- prune_taxa(taxa_sums(ITS)>10, ITS)
kingdom <- as.vector(data.frame(tax_table(ITS))$Kingdom)
tax.keep <- kingdom=="Fungi"
tax.keep[is.na(tax.keep)] <- FALSE
ITS.prune <- prune_taxa(tax.keep,ITS)
# Rarefaction to 8,000 reads
ITS.rare <- rarefy_even_depth(physeq=ITS.prune,sample.size=8000,rngseed=7,replace=FALSE,trimOTUs=TRUE,verbose=TRUE)
rm(ITS.prune)
rm(ITS)
# With this random seed, F_GCE97 is missing
ITS.amf <- subset_taxa(ITS.rare, Phylum=="Glomeromycota")
#############
# Run BORAL #
#############
# Aggregate
ITS.family <- tax_glom(ITS.rare, "Family")
# Insert plant species
otu <- otu_table(ITS.family)
NAPU4 <- plants.prune$NAPU4[match(as.numeric(sub("F_GCE","",colnames(otu))), rownames(plants.prune))]
otu <- rbind(otu, NAPU4)
ITS.family <- phyloseq(otu_table(otu, taxa_are_rows=TRUE), sample_data(ITS.rare))
# Filter to OTUs that appear in at least 20% of plots
ITS.filter <- filter_taxa(ITS.family, function(x) sum(x > 0) > (0.2*length(x)), TRUE)
setwd("~/Documents/Honors Thesis/R Scripts/boral")
print(paste("Started at", Sys.time()))
require('phyloseq')
require('reshape2')
require('dplyr')
require('boral')
correct_batch_means <- function(sample_data, colrange, col.batch) {
global.means <- apply(sample_data[,colrange], 2, mean, na.rm=TRUE)
for(i in 1:4) {
ind <- which(sample_data[,col.batch]==i)
batch.means <- apply(sample_data[ind,colrange], 2, mean, na.rm=TRUE)
mean.diffs <- global.means - batch.means
colrange.numeric <- match(colrange, names(sample_data))
for(j in colrange.numeric) {
sample_data[which(sample_data[,col.batch]==i),j] <- sample_data[which(sample_data[,col.batch]==i),j] + mean.diffs[j-min(colrange.numeric)+1]
}
}
sample_data
}
###################
#  Load ITS Data  #
###################
# Load data via phyloseq
ITS <- import_biom("otu_table_wTax_ITS.biom",parseFunction=parse_taxonomy_greengenes)
sampleDataITS <- import_qiime_sample_data("mapping_file_ITS.txt")
# Convert between int and factors where necessary
sampleDataITS$treatment.group <- as.factor(sampleDataITS$treatment.group)
sampleDataITS$n <- as.factor(sampleDataITS$n)
sampleDataITS$co2 <- as.factor(sampleDataITS$co2)
sampleDataITS$heat <- as.factor(sampleDataITS$heat)
sampleDataITS$precip <- as.factor(sampleDataITS$precip)
sampleDataITS$perc.N <- as.numeric(as.character(sampleDataITS$perc.N))
sampleDataITS$perc.C <- as.numeric(as.character(sampleDataITS$perc.C))
sampleDataITS$plant.P.content <- as.numeric(as.character(sampleDataITS$plant.P.content))
sampleDataITS$CE.batch <- as.factor(sampleDataITS$CE.batch)
# Correct for CE batches
col1 <- which(names(sampleDataITS)=="perc.N")
col2 <- which(names(sampleDataITS)=="C.N")
colrange <- names(sampleDataITS)[col1:col2]
col3 <- which(names(sampleDataITS)=="CE.batch")
sampleDataITS <- correct_batch_means(sampleDataITS, colrange, col3)
# Incorporate sampleData
sample_data(ITS) <- sampleDataITS
rm(sampleDataITS)
# Include functional guilds
funguild <- read.csv("guilds.csv", header=TRUE)
# Create final columns in tax_table to reflect Trophic Mode and Functional Guild
#tax_table(ITS)[,8] <- tax_table(ITS)[,6]=="Glomus"
tax_table(ITS)[,8] <- as.character(funguild$Trophic.Mode[match(rownames(tax_table(ITS)),funguild$X.OTU.ID)])
tax_table(ITS) <- cbind(tax_table(ITS), as.character(funguild$Guild[match(rownames(tax_table(ITS)),funguild$X.OTU.ID)]))
colnames(tax_table(ITS))[8:9] <- c("Trophic.Mode","Guild")
# Remove GCE70 because it contained two missing values (perc.N and perc.C)
rm.ind <- which(rownames(sample_data(ITS))=="F_GCE70")
sample_data(ITS) <- sample_data(ITS)[-rm.ind,]
# Remove low-abundance taxa and poorly-classified taxa
ITS.prune <- prune_taxa(taxa_sums(ITS)>10, ITS)
kingdom <- as.vector(data.frame(tax_table(ITS))$Kingdom)
tax.keep <- kingdom=="Fungi"
tax.keep[is.na(tax.keep)] <- FALSE
ITS.prune <- prune_taxa(tax.keep,ITS)
# Rarefaction to 8,000 reads
ITS.rare <- rarefy_even_depth(physeq=ITS.prune,sample.size=8000,rngseed=7,replace=FALSE,trimOTUs=TRUE,verbose=TRUE)
rm(ITS.prune)
rm(ITS)
# With this random seed, F_GCE97 is missing
ITS.amf <- subset_taxa(ITS.rare, Phylum=="Glomeromycota")
#############
# Run BORAL #
#############
# Aggregate
ITS.family <- tax_glom(ITS.rare, "Family")
# Insert plant species
otu <- otu_table(ITS.family)
NAPU4 <- plants.prune$NAPU4[match(as.numeric(sub("F_GCE","",colnames(otu))), rownames(plants.prune))]
otu <- rbind(otu, NAPU4)
ITS.family <- phyloseq(otu_table(otu, taxa_are_rows=TRUE), sample_data(ITS.rare))
# Filter to OTUs that appear in at least 20% of plots
ITS.filter <- filter_taxa(ITS.family, function(x) sum(x > 0) > (0.2*length(x)), TRUE)
ITS.family <- phyloseq(otu_table(otu, taxa_are_rows=TRUE), sample_data(ITS.family))
ITS.family <- tax_glom(ITS.rare, "Family")
ITS.family <- tax_glom(ITS.rare, "Family")
# Insert plant species
otu <- otu_table(ITS.family)
Plants <- read.csv("Biomass.csv")
Plants <- Plants[which(Plants$yr==2014),]
Plants <- Plants[-which(Plants$sp=="LITR"),] # Remove litter
plants.w <- dcast(Plants, plt ~ sp, value.var="bio")
checksum <- colSums(plants.w)
plants.prune <- plants.w[,-c(which(checksum==0), 1)]
rownames(plants.prune) <- plants.w$plt
NAPU4 <- plants.prune$NAPU4[match(as.numeric(sub("F_GCE","",colnames(otu))), rownames(plants.prune))]
otu <- rbind(otu, NAPU4)
ITS.family <- phyloseq(otu_table(otu, taxa_are_rows=TRUE), sample_data(ITS.family))
rm(otu)
rm(Plants)
rm(plants.w)
rm(plants.prune)
ITS.filter <- filter_taxa(ITS.family, function(x) sum(x > 0) > (0.2*length(x)), TRUE)
ITS.filter
library(dplyr)
library(reshape2)
library(ecodist)
library(ggplot2)
trim <- function( x ) {
gsub("(^[[:space:]]+|[[:space:]]+$)", "", x)
}
setwd("~/Documents/Stanford Coterm Year/ICME Research/GER_website")
courses <- read.delim("ec_20152016_wCareer.txt", header=TRUE, sep="\t", quote="")
se3.intro <- read.delim("se3_intro_courses.txt", sep="\n")
se3.intro
as.vector(se3.intro)
dim(as.vector(se3.intro))
se3.intro <- read.delim("se3_intro_courses.txt", sep="\n")[,-1]
se3.intro <- read.delim("se3_intro_courses.txt", sep="\n")[,1]
se3.intro
head(courses)
head(paste(courses$subject, courses$catalog_nbr))
courses$intro <- paste(courses$subject, courses$catalog_nbr) %in% se3.intro
sum(courses$intro)
length(se3.intro)
courses[which(courses$intro),]
head(courses)
names(courses)
setwd("~/Documents/Stanford Coterm Year/ICME Research/GER_website")
courses <- read.delim("ec_20152016_wCareer.txt", header=TRUE, sep="\t", quote="")
se3.intro <- read.delim("se3_intro_courses.txt", sep="\n")[,1]
# We only care about UG courses
courses <- courses[which(courses$career=="UG"),]
# Mark SE3 intro courses, as specified in https://earth.stanford.edu/introductory-courses
courses$intro <- paste(courses$subject, courses$catalog_nbr) %in% se3.intro
# Make indicator column for each UG req
courses$WAY.A.II <- unlist(grepl("WAY-A-II", courses$gers))
courses$WAY.AQR <- unlist(grepl("WAY-AQR", courses$gers))
courses$WAY.CE <- unlist(grepl("WAY-CE", courses$gers))
courses$WAY.ED <- unlist(grepl("WAY-ED", courses$gers))
courses$WAY.ER <- unlist(grepl("WAY-ER", courses$gers))
courses$WAY.FR <- unlist(grepl("WAY-FR", courses$gers))
courses$WAY.SI <- unlist(grepl("WAY-SI", courses$gers))
courses$WAY.SMA <- unlist(grepl("WAY-SMA", courses$gers))
courses$THINK <- unlist(grepl("THINK", courses$gers))
# Can use alternative req names:
ugreq.names <- names(courses)[20:28]
ugreq.names2 <- c("Aesthetic","Quantitative","Creative","Diversity",
"Ethical","Formal","Social","Scientific","THINK")
names(courses)[20:28] <- ugreq.names2
# No. UG reqs covered
courses$n.reqs <- rowSums(courses[,20:28])
names(courses)
setwd("~/Documents/Stanford Coterm Year/ICME Research/GER_website")
courses <- read.delim("ec_20152016_wCareer.txt", header=TRUE, sep="\t", quote="")
se3.intro <- read.delim("se3_intro_courses.txt", sep="\n")[,1]
# We only care about UG courses
courses <- courses[which(courses$career=="UG"),]
# Mark SE3 intro courses, as specified in https://earth.stanford.edu/introductory-courses
courses$intro <- paste(courses$subject, courses$catalog_nbr) %in% se3.intro
# Make indicator column for each UG req
courses$WAY.A.II <- unlist(grepl("WAY-A-II", courses$gers))
courses$WAY.AQR <- unlist(grepl("WAY-AQR", courses$gers))
courses$WAY.CE <- unlist(grepl("WAY-CE", courses$gers))
courses$WAY.ED <- unlist(grepl("WAY-ED", courses$gers))
courses$WAY.ER <- unlist(grepl("WAY-ER", courses$gers))
courses$WAY.FR <- unlist(grepl("WAY-FR", courses$gers))
courses$WAY.SI <- unlist(grepl("WAY-SI", courses$gers))
courses$WAY.SMA <- unlist(grepl("WAY-SMA", courses$gers))
courses$THINK <- unlist(grepl("THINK", courses$gers))
names(courses)
ugreq.names <- names(courses)[21:29]
ugreq.names2 <- c("Aesthetic","Quantitative","Creative","Diversity",
"Ethical","Formal","Social","Scientific","THINK")
names(courses)[21:28] <- ugreq.names2
names(courses)
names(courses[21:29])
setwd("~/Documents/Stanford Coterm Year/ICME Research/GER_website")
courses <- read.delim("ec_20152016_wCareer.txt", header=TRUE, sep="\t", quote="")
se3.intro <- read.delim("se3_intro_courses.txt", sep="\n")[,1]
# We only care about UG courses
courses <- courses[which(courses$career=="UG"),]
# Mark SE3 intro courses, as specified in https://earth.stanford.edu/introductory-courses
courses$intro <- paste(courses$subject, courses$catalog_nbr) %in% se3.intro
# Make indicator column for each UG req
courses$WAY.A.II <- unlist(grepl("WAY-A-II", courses$gers))
courses$WAY.AQR <- unlist(grepl("WAY-AQR", courses$gers))
courses$WAY.CE <- unlist(grepl("WAY-CE", courses$gers))
courses$WAY.ED <- unlist(grepl("WAY-ED", courses$gers))
courses$WAY.ER <- unlist(grepl("WAY-ER", courses$gers))
courses$WAY.FR <- unlist(grepl("WAY-FR", courses$gers))
courses$WAY.SI <- unlist(grepl("WAY-SI", courses$gers))
courses$WAY.SMA <- unlist(grepl("WAY-SMA", courses$gers))
courses$THINK <- unlist(grepl("THINK", courses$gers))
# Can use alternative req names:
ugreq.names <- names(courses)[21:29]
ugreq.names2 <- c("Aesthetic","Quantitative","Creative","Diversity",
"Ethical","Formal","Social","Scientific","THINK")
names(courses)[21:29] <- ugreq.names2
# No. WAYS reqs covered
courses$n.reqs <- rowSums(courses[,21:28])
names(courses)
courses.school <- courses[-which(duplicated(courses[,c(2,5)])), c(2:5,21:30)]
names(courses[,c(2:5,21:30)])
courses.by.intro <- courses[-which(duplicated(courses[,c(2,20)])), c(2:5,21:30)]
names(courses.by.intro)
courses.by.intro <- courses[-which(duplicated(courses[,c(2,20)])), c(2:5,20:30)]
names(courses.by.intro)
unique(courses.by.intro$school)
courses.by.intro <- courses.by.intro[which(courses.by.intro$school=="EARTH"),]
unique(courses.by.intro$intro)
ugreq.names2
courses.by.intro %>%
group_by(intro) %>%
summarise_each(funs(mean), one_of(ugreq.names2)) ->
intro.summary
intro.summary
intro.melt <- melt(intro.summary)
reqs_count <- colSums(intro.summary[,-1])
reqs_mean <- reqs_count/nrow(courses)
reqs_mean
p.intro <- ggplot(intro.melt, aes(x=intro, y=variable)) + geom_tile(aes(fill=value), colour="black") +
scale_fill_gradient(low="white",high="blue") + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5))
p.intro
p.intro <- ggplot(intro.melt, aes(x=intro, y=variable)) + geom_tile(aes(fill=value), colour="black") +
scale_fill_gradient("Prop. Certified",low="white",high="maroon") +
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5)) +
ylab("WAYS Requirement") + xlab("Intro course?") +
ggtitle("By Intro Status: % of UG courses\ncertified to fulfill UG requirements")
p.intro
p.intro <- ggplot(intro.melt, aes(x=intro, y=variable)) + geom_tile(aes(fill=value), colour="black") +
scale_fill_gradient("Prop. Certified",low="white",high="maroon") +
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5)) +
ylab("WAYS Requirement") + xlab("Intro course?") +
ggtitle("By Intro Status within SE3:\n% of UG coursescertified to fulfill UG requirements")
p.intro
p.intro <- ggplot(intro.melt, aes(x=intro, y=variable)) + geom_tile(aes(fill=value), colour="black") +
scale_fill_gradient("Prop. Certified",low="white",high="maroon") +
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5)) +
ylab("WAYS Requirement") + xlab("Intro course?") +
ggtitle("By Intro Status within SE3:\n% of UG courses certified to fulfill UG requirements")
p.intro
p.intro <- ggplot(intro.melt, aes(x=intro, y=variable)) + geom_tile(aes(fill=value), colour="black") +
scale_fill_gradient("Prop. Certified",low="white",high="maroon") +
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5)) +
ylab("WAYS Requirement") + xlab("Intro course?") +
ggtitle("By Intro Status within SE3: % of\nUG courses certified to fulfill UG requirements")
p.intro
p.intro <- ggplot(intro.melt, aes(x=intro, y=variable)) + geom_tile(aes(fill=value), colour="black") +
scale_fill_gradient("Prop. Certified",low="white",high="maroon") +
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5)) +
ylab("WAYS Requirement") + xlab("Intro course?") +
ggtitle("By Intro Status within SE3:\n% of UG courses certified to fulfill UG requirements")
p.intro
ggsave("ugreq_intro.png", device="png", width=5, height=4)
courses.by.intro %>%
group_by(intro) %>%
summarise_each(funs(sum), one_of(ugreq.names2)) ->
intro.summary.counts
courses.by.intro %>%
group_by(intro) %>%
summarise(all=n()) ->
intro.summary.total
intro.summary.counts <- cbind(intro.summary.counts, intro.summary.total[,2])
intro.summary.counts
116/(116+32)
write.csv(intro.summary.counts, "ugreq_intro_counts.csv", row.names=FALSE)
names(courses.by.intro)
courses.by.intro %>%
group_by(intro, subject) %>%
summarise_each(funs(mean), one_of(ugreq.names2)) ->
intro.subject.summary
intro.subject.summary
View(intro.subject.summary)
courses.by.intro
# Summarise UG reqs by intro status and subject code
courses.by.intro %>%
group_by(intro) %>%
summarise(prop.certified = mean(n.reqs > 0)) ->
intro.prop.certified
intro.prop.certified
courses.by.intro %>%
group_by(intro) %>%
summarise(prop.certified = mean(n.reqs > 0)) ->
intro.prop.certified
courses.by.intro %>%
group_by(intro, subject) %>%
summarise(prop.certified = mean(n.reqs > 0)) ->
intro.subject.prop.certified
intro.subject.prop.certified
courses.by.intro[which(courses.by.intro$intro==FALSE & courses.by.intro$subject=="EARTHSYS"),]
?filter
filter(courses.by.intro, intro==TRUE, n.reqs>0, subject=="EARTHSYS")
intro.prop.certified
intro.subject.prop.certified
filter(courses.by.intro, intro==TRUE, n.reqs>0)
filter(courses.by.intro, intro==TRUE, n.reqs>0)[,2:3]
intro.subject.prop.certified
write.csv(intro.subject.prop.certified, "prop-cert_intro.csv", row.names=FALSE)
certified.intro <- filter(courses.by.intro, intro==TRUE, n.reqs>0)[,2:3]
certified.intro <- filter(courses.by.intro, intro==TRUE, n.reqs>0)[,2:3]
certified.nonintro <- filter(courses.by.intro, intro==FALSE, n.reqs>0)[,2:3]
certified.intro
certified.nonintro
unique(courses.by.intro[which(courses.by.intro$intro==TRUE),])
unique(courses.by.intro[which(courses.by.intro$intro==TRUE),"subject"])
unique(courses.by.intro[which(courses.by.intro$intro==FALSE),"subject"])
certified.intro
intro.summary.counts
116/(116/32)
116/(116+32)
32 / 148
p.intro
intro.summary
mean(courses.by.subject$n.reqs>0)
mean(courses.by.intro$n.reqs>0)
.22*.56 + .78*.26
certified.intro
certified.intro
paste(certified.intro[,1:2])
paste(c(certified.intro[,1:2]))
certified.intro
paste(certified.intro[,1], certified.intro[,2])
write.csv(paste(certified.intro[,1], certified.intro[,2]), "certified_intro.csv")
write.csv(paste(certified.nonintro[,1], certified.nonintro[,2]), "certified_nonintro.csv")
certified.intro
names(courses.by.intro)
names(courses)
se3.subjects <- c("EARTH", "EARTHSYS", "EEES", "ENERGY", "ENVRES", "ESS", "GS", "GEOPHYS", "ENVRINST", "EARTHSCI", "EESS")
subject.interest <- subject.summary[which(subject.summary$subject %in% c("CME",se3.subjects)),]
courses.subject <- courses[-which(duplicated(courses[,c(2,3)])), c(2:5,21:30)]
# Summarise UG reqs by subject
courses.subject %>%
group_by(subject) %>%
summarise_each(funs(mean), one_of(ugreq.names2)) ->
subject.summary
se3.subjects <- c("EARTH", "EARTHSYS", "EEES", "ENERGY", "ENVRES", "ESS", "GS", "GEOPHYS", "ENVRINST", "EARTHSCI", "EESS")
subject.interest <- subject.summary[which(subject.summary$subject %in% c("CME",se3.subjects)),]
subject.interest
courses.by.intro <- courses[-which(duplicated(courses[,c(2,20)])), c(2:5,7,20:30)]
courses.by.intro <- courses.by.intro[which(courses.by.intro$school=="EARTH"),]
courses.by.intro %>%
group_by(intro) %>%
summarise_each(funs(mean), one_of(ugreq.names2)) ->
intro.summary
intro.summary
names(courses.by.intro)
certified.intro <- filter(courses.by.intro, intro==TRUE, n.reqs>0)[,c(2,3,5)]
certified.nonintro <- filter(courses.by.intro, intro==FALSE, n.reqs>0)[,c(2,3,5)]
certified.intro
names(courses.by.intro)
names(courses.by.intro[,7:15])
which(courses.by.intro[1,7:15])
courses.by.intro[1,7:15]
which(courses.by.intro[1,7:15]==TRUE)
which(courses.by.intro[1,7:15]==FALSE)
get_ways_names <- function(vector, startcol, endcol) {
names(vector[startcol:endcol])[vector[startcol:endcol]]
}
get_ways_names(courses.by.intro, 7, 15)
get_ways_names(courses.by.intro[1,], 7, 15)
vec <- courses.by.intro[1,]
vector <- courses.by.intro[1,]
names(vector[startcol:endcol])[vector[startcol:endcol]]
startcol=7
endcol=15
names(vector[startcol:endcol])[vector[startcol:endcol]]
vector[startcol:endcol]
names(vector[startcol:endcol])[which(vector[startcol:endcol]==TRUE)]
get_ways_names <- function(vector, startcol, endcol) {
names(vector[startcol:endcol])[which(vector[startcol:endcol]==TRUE)]
}
get_ways_names(courses.by.intro[1,], 7, 15)
get_ways_names(courses.by.intro[2,], 7, 15)
apply(courses.by.intro,1,get_ways_names, 7, 15)
get_ways_names <- function(vector, range) {
names(vector[range])[which(vector[range]==TRUE)]
}
get_ways_names(courses.by.subject[1,], 7:15)
get_ways_names(courses.by.intro[1,], 7:15)
get_ways_names(courses.by.intro[2,], 7:15)
?apply
apply(courses.by.intro, 1, get_ways_names, 7:15)
courses.by.intro
head(courses.by.intro)
apply(courses.by.intro, 1, get_ways_names, 7:15)
get_ways_names <- function(vector, range) {
return(names(vector[range])[which(vector[range]==TRUE)])
}
apply(courses.by.intro, 1, get_ways_names, 7:15)
apply(courses.by.intro[-1,], 1, get_ways_names, 7:15)
apply(courses.by.intro[2,], 1, get_ways_names, 7:15)
apply(courses.by.intro[2,], 1, get_ways_names)
apply(courses.by.intro, 1, get_ways_names)
get_ways_names <- function(vector, range=7:15) {
return(names(vector[range])[which(vector[range]==TRUE)])
}
apply(courses.by.intro, 1, get_ways_names)
get_ways_names <- function(vector, names=names(courses.by.intro), range=7:15) {
return(names[range][which(vector[range]==TRUE)])
}
apply(courses.by.intro, 1, get_ways_names)
sets <- read.csv("geophysics_sets.txt", header=FALSE)
setwd("~/Documents/Stanford Coterm Year/ICME Research/pathways_project/python_scripts")
sets <- read.csv("geophysics_sets.txt", header=FALSE)
nrow(sets)
unique(sets)
View(sets)
as.data.frame(unique(sets))
t(as.data.frame(unique(sets)))
