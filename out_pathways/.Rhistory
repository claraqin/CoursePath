pred.SDI <- predict(fed.lm.SDI, newdata=fed00)
Y_151.pred2 <- cbind(fed00[,1:2], pred.NOI, pred.SDI)
Y_151.pred2
leftout
fed00
dim(fed)
fed00 <- fed[151,3:6]
dim(fed)
fed00
fed[151,]
fed[152,]
fed[154,]
fed <- read.table("m-napm-8812.txt", header = TRUE)
# Build lm for NOI and for SDI
fed.lm.NOI <- lm(NOI ~ PI + II, data=fed[,3:6])
summary(fed.lm.NOI)
fed.lm.SDI <- lm(SDI ~ PI + II, data=fed[,3:6])
summary(fed.lm.SDI)
# Newdata: row 151
fed00 <- fed[151,3:6]
fed00[1,3:4] <- NA
# Make predictions
pred.NOI <- predict(fed.lm.NOI, newdata=fed00)
pred.SDI <- predict(fed.lm.SDI, newdata=fed00)
Y_151.pred2 <- cbind(fed00[,1:2], pred.NOI, pred.SDI)
```
Y_151.pred2
leftout
Y_151.pred1
Y_151.pred2
mm <- c(mm[,-1], -1)
fed.ts <- as.zoo(fed[,3:6], as.yearmon(fed$yearmon))
plot(fed.ts)
fed <- read.table("m-napm-8812.txt", header = TRUE)
leftout <- fed[151,]
fed[151,3:6] <- c(NA, NA, NA, NA)
fed$yearmon <- paste(fed$year, "-", fed$mon, sep = "")
fed.ts <- as.zoo(fed[,3:6], as.yearmon(fed$yearmon))
plot(fed.ts)
VARselect(fed.ts[c(1:150,152:300),], lag.max = 12, type = "both")$selection
var_2 <- VAR(fed.ts[c(1:150,152:300),], p = 2, type = "const")
serial.test(var_2, lags.pt=12, type = "PT.asymptotic")
fed_pred_df <- fed.ts[c(1:151),]
fed_pred_df$PI.l1 <- lag(fed_pred_df[,1], -1)
fed_pred_df$PI.l2 <- lag(fed_pred_df[,1], -2)
fed_pred_df$II.l1 <- lag(fed_pred_df[,2], -1)
fed_pred_df$II.l2 <- lag(fed_pred_df[,2], -2)
fed_pred_df$NOI.l1 <- lag(fed_pred_df[,3], -1)
fed_pred_df$NOI.l2 <- lag(fed_pred_df[,3], -2)
fed_pred_df$SDI.l1 <- lag(fed_pred_df[,4], -1)
fed_pred_df$SDI.l2 <- lag(fed_pred_df[,4], -2)
vec <- with(fed_pred_df, data.frame(PI.l1 = PI.l1[151], PI.l2 = PI.l2[151], II.l1 = II.l1[151], II.l2 = II.l2[151], NOI.l1 = NOI.l1[151], NOI.l2 = NOI.l2[151], SDI.l1 = SDI.l1[151], SDI.l2 = SDI.l2[151], -1))
mm <- model.matrix(~ PI.l1 + II.l1  + NOI.l1 + SDI.l1 + PI.l2 +  II.l2  + NOI.l2 + SDI.l2, data = vec)
mm <- c(mm[,-1], -1)
Y_151.pred1 <- c(mm%*%var_2$varresult$PI$coefficients, mm%*%var_2$varresult$II$coefficients, mm%*%var_2$varresult$NOI$coefficients, mm%*%var_2$varresult$SDI$coefficients)
```
Y_151.pred1
leftout
fed <- read.table("m-napm-8812.txt", header = TRUE)
leftout[3]
leftout
class(diff3)
require(knitr)
require(ggplot2)
require(GGally)
require(RColorBrewer)
require(gridExtra)
require(reshape2)
require(tseries)
require(gdata)
require(car)
require(forecast)
require(dyn)
require(lubridate)
require(xts)
require(vars)
var_2 <- VAR(fed.ts[c(1:150,152:300),], p = 2, type = "const")
var_2 <- VAR(fed.ts[c(1:150,152:300),])
names(fed.ts)
names(fed.ts)
fed <- read.table("m-napm-8812.txt", header = TRUE)
leftout <- fed[151,]
fed[151,3:6] <- c(NA, NA, NA, NA)
fed$yearmon <- paste(fed$year, "-", fed$mon, sep = "")
fed.ts <- as.zoo(fed[,3:6], as.yearmon(fed$yearmon))
plot(fed.ts)
names(fed.ts)
fed
var_2 <- VAR(fed.ts[c(1:150,152:300),], p = 2, type = "const")
var_2 <- VAR(fed.ts[c(1:150,152:300),])
fed.ts
var_2 <- VAR(fed.ts[c(1:150,152:300),], p = 2, type = "const")
```{r setup, include=FALSE}
require(knitr)
require(knitr)
require(ggplot2)
require(GGally)
require(RColorBrewer)
require(gridExtra)
require(reshape2)
require(tseries)
require(gdata)
require(car)
require(forecast)
require(dyn)
require(lubridate)
require(xts)
require(vars)
options(max.print= 100000000)
options(width = 100)
# opts_chunk$set(out.width='1500px', dpi=500)
opts_chunk$set(dpi=100)
knitr::opts_chunk$set(fig.width=8, fig.height=7,
warning=FALSE, message=FALSE)
fed <- read.table("m-napm-8812.txt", header = TRUE)
leftout <- fed[151,]
fed[151,3:6] <- c(NA, NA, NA, NA)
fed$yearmon <- paste(fed$year, "-", fed$mon, sep = "")
fed.ts <- as.zoo(fed[,3:6], as.yearmon(fed$yearmon))
plot(fed.ts)
VARselect(fed.ts[c(1:150,152:300),], lag.max = 12, type = "both")$selection
var_2 <- VAR(fed.ts[c(1:150,152:300),], p = 2, type = "const")
serial.test(var_2, lags.pt=12, type = "PT.asymptotic")
?as.zoo
class(fed.ts)
library(zoo)
var_2 <- VAR(fed.ts[c(1:150,152:300),], p = 2, type = "const")
fed
head(fed)
fed <- read.table("m-napm-8812.txt", header = TRUE)
leftout <- fed[151,]
fed[151,3:6] <- c(NA, NA, NA, NA)
fed.ts <- ts(fed[,3:6], start=1988, frequency=12)
fed.ts
class(fed.ts)
plot(fed.ts)
VARselect(fed.ts[c(1:150,152:300),], lag.max = 12, type = "both")$selection
var_2 <- VAR(fed.ts[c(1:150,152:300),], p = 2, type = "const")
serial.test(var_2, lags.pt=12, type = "PT.asymptotic")
?VAR
fed <- fed[-151]
fed.ts <- ts(fed[,3:6], start=1988, frequency=12)
var_2 <- VAR(fed.ts[c(1:150,152:300),], p = 2, type = "const")
which(is.na(fed.ts))
fed.ts
fed[151,]
fed <- read.table("m-napm-8812.txt", header = TRUE)
leftout <- fed[151,]
fed.ts <- ts(fed[,3:6], start=1988, frequency=12)
which(is.na(fed.ts[c(1:150,152:300),]))
VARselect(fed.ts[c(1:150,152:300),], lag.max = 12, type = "both")$selection
var_2 <- VAR(fed.ts[c(1:150,152:300),], p = 2, type = "const")
serial.test(var_2, lags.pt=12, type = "PT.asymptotic")
lefout
leftout
class(leftout)
leftout[3:6]
plot(fed)
plot(fed.ts)
source('~/Documents/Stanford Coterm Year/ICME Research/GER_website/ways_distribution.R', echo=TRUE)
subject.summary
subject.interest
40*50
70000/2000
950*60
950*20
19000/12
y = read.table(file="invert raw data.txt", header=TRUE, sep='\t')
names(y)
setwd("~/Documents/Stanford Coterm Year/Conservation Tech/Invertebrate Surveys")
y = read.table(file="invert raw data.txt", header=TRUE, sep='\t')
names(y)
y$pond.group <- substr(y$Site.ID, 0,2)
library(reshape2)
y.long <- melt(data=y, id.vars=c('Site.ID','Date'), measure.vars=names(y)[9:25], variable.name='spp')
y.long$pond.group <- substr(y.long$Site.ID, 0,2)
write.csv(y.long, "invert_long.csv", row.names=FALSE)
library(vegan)
y.abund <- y[,9:25]
plot(y$Site.ID,diversity(y.abund, index="shannon"))
library(dplyr)
library(ggplot2)
theme_set(theme_bw())
trophic <- read.table("taxa.txt", header=TRUE, sep='\t')
names(y.long)
names(trophic)
match(y.long$spp, trophic$Name)
y.long[which(is.na(match(y.long$spp, trophic$Name))),]
unique(y.long[which(is.na(match(y.long$spp, trophic$Name))),])
unique(y.long[which(is.na(match(y.long$spp, trophic$Name))),"spp"])
unique(y.long$spp)
names(trophic$Name)
unique(trophic$Name)
names(y)
y = read.table(file="invert raw data.txt", header=TRUE, sep='\t')
names(y)
head(y)
names(y)
names(y)[9:25] <- c("Podocopida","Linderiella","Cyzicus","Coeloptera.small","Daphnia","Culicidae","Copepoda","Turbellaria","Corixidae","Notonectidae","Coleoptera.large","Unknown.water.mite","Scirtidae","Ceratopogonidae")
length(c("Podocopida","Linderiella","Cyzicus","Coeloptera.small","Daphnia","Culicidae","Copepoda","Turbellaria","Corixidae","Notonectidae","Coleoptera.large","Unknown.water.mite","Scirtidae","Ceratopogonidae"))
length(c("Podocopida","Linderiella","Cyzicus","Coeloptera.small","Daphnia","Culicidae","Copepoda","Turbellaria","Corixidae","Notonectidae","Midge.larvae","Coleoptera.large","Charoboridiae","Acariformes","Unknown.water.mite","Scirtidae","Ceratopogonidae"))
names(y)[9:25] <- c("Podocopida","Linderiella","Cyzicus","Coeloptera.small","Daphnia","Culicidae","Copepoda","Turbellaria","Corixidae","Notonectidae","Midge.larvae","Coleoptera.large","Charoboridiae","Acariformes","Unknown.water.mite","Scirtidae","Ceratopogonidae")
y$pond.group <- substr(y$Site.ID, 0,2)
y.long <- melt(data=y, id.vars=c('Site.ID','Date'), measure.vars=names(y)[9:25], variable.name='spp')
y.long$pond.group <- substr(y.long$Site.ID, 0,2)
trophic <- read.table("taxa.txt", header=TRUE, sep='\t')
unique(y.long[which(is.na(match(y.long$spp, trophic$Name))),"spp"])
trophic <- read.table("taxa.txt", header=TRUE, sep='\t')
unique(y.long[which(is.na(match(y.long$spp, trophic$Name))),"spp"])
y = read.table(file="invert raw data.txt", header=TRUE, sep='\t')
names(y)[9:25] <- c("Podocopida","Linderiella","Cyzicus","Coeloptera.small","Daphnia","Culicidae","Copepoda","Turbellaria","Corixidae","Notonectidae","Midge.larvae","Coleoptera.large","Chaoboridiae","Acariformes","Unknown.water.mite","Scirtidae","Ceratopogonidae")
y$pond.group <- substr(y$Site.ID, 0,2)
y.long <- melt(data=y, id.vars=c('Site.ID','Date'), measure.vars=names(y)[9:25], variable.name='spp')
y.long$pond.group <- substr(y.long$Site.ID, 0,2)
trophic <- read.table("taxa.txt", header=TRUE, sep='\t')
unique(y.long[which(is.na(match(y.long$spp, trophic$Name))),"spp"])
names(trophic)
trophic <- read.table("taxa.txt", header=TRUE, sep='\t')
y.long$guild <- trophic$Guild[which(match(y.long$spp, trophic$Name))]
y.long$guild <- trophic$Guild[match(y.long$spp, trophic$Name)]
head(y.long)
y.long <- melt(data=y, id.vars=c('Site.ID','pond.group','Date'), measure.vars=names(y)[9:25], variable.name='spp')
trophic <- read.table("taxa.txt", header=TRUE, sep='\t')
y.long$guild <- trophic$Guild[match(y.long$spp, trophic$Name)]
head(y.long)
?arrange
write.csv(y.long, "invert_long.csv", row.names=FALSE)
View(trophic)
(exp(1)-1)/exp(1)
1.1*0.8
?root
??root
rootz <- function(z) {
value <- 1-1.9*z+0.95*z^2-0.56*z^3
points(z,value)
}
abline(1,1)
x=seq(-10,10,by=0.1)
plot(x=x)
par(mfrow=c(1,1))
plot(x=x)
rootz(x)
plot(x=x,y=x)
rootz(x)
rootz <- function(z) {
value <- 1-1.9*z+0.95*z^2-0.56*z^3
points(z,value)
value
}
plot(x=x,y=x)
rootz(x)
x[107]
1.1+sqrt(1.1^2-4*0.7)/2
1.1^2-4*0.7
sqrt(1.59)
sqrt(1.59)/2
y <- c(118.78, 118.73, 116.54, 116.62, 126.22)
a <- c(0.44, 0.56, 1.85, -0.82, -0.47)
y[5] + y[2] - y[1] -0.5*a[5] - 0.6*a[4] + 0.3*a[3]
y.f1 <- y[5] + y[2] - y[1] -0.5*a[5] - 0.6*a[4] + 0.3*a[3]
y.f1 <- y[5] + y[2] - y[1] -0.5*a[5] - 0.6*a[4] + 0.3*a[3]
y.f2 <- y.f1 + y[3] - y[2] - 0.6*a[5] + 0.3*a[4]
y/f2
y.f2
y.f1
y.f3 <- y.f2 + y[4] - y[3] + 0.3*a[5]
y.f4 <- y.f3 + y[5] - y[4]
y.f3
y.f4
0.497+1.58
(0.497+1.58)/1.9
0.56/1.9
1.9+0.56
(0.497+1.58)/2.46
1.9*0.497 - 1.58*0.844 + 0.56
1.9*0.17078 - 1.58*0.497 + 0.56*0.844
print("Let's get started")
require('phyloseq')
require('reshape2')
require('dplyr')
correct_batch_means <- function(sample_data, colrange, col.batch) {
global.means <- apply(sample_data[,colrange], 2, mean, na.rm=TRUE)
for(i in 1:4) {
ind <- which(sample_data[,col.batch]==i)
batch.means <- apply(sample_data[ind,colrange], 2, mean, na.rm=TRUE)
mean.diffs <- global.means - batch.means
colrange.numeric <- match(colrange, names(sample_data))
for(j in colrange.numeric) {
sample_data[which(sample_data[,col.batch]==i),j] <- sample_data[which(sample_data[,col.batch]==i),j] + mean.diffs[j-min(colrange.numeric)+1]
}
}
sample_data
}
###################
#  Load ITS Data  #
###################
# Load data via phyloseq
ITS <- import_biom("otu_table_wTax_ITS.biom",parseFunction=parse_taxonomy_greengenes)
sampleDataITS <- import_qiime_sample_data("mapping_file_ITS.txt")
# Convert between int and factors where necessary
sampleDataITS$treatment.group <- as.factor(sampleDataITS$treatment.group)
sampleDataITS$n <- as.factor(sampleDataITS$n)
sampleDataITS$co2 <- as.factor(sampleDataITS$co2)
sampleDataITS$heat <- as.factor(sampleDataITS$heat)
sampleDataITS$precip <- as.factor(sampleDataITS$precip)
sampleDataITS$perc.N <- as.numeric(as.character(sampleDataITS$perc.N))
sampleDataITS$perc.C <- as.numeric(as.character(sampleDataITS$perc.C))
sampleDataITS$plant.P.content <- as.numeric(as.character(sampleDataITS$plant.P.content))
sampleDataITS$CE.batch <- as.factor(sampleDataITS$CE.batch)
# Correct for CE batches
col1 <- which(names(sampleDataITS)=="perc.N")
col2 <- which(names(sampleDataITS)=="C.N")
colrange <- names(sampleDataITS)[col1:col2]
col3 <- which(names(sampleDataITS)=="CE.batch")
sampleDataITS <- correct_batch_means(sampleDataITS, colrange, col3)
# Incorporate sampleData
sample_data(ITS) <- sampleDataITS
rm(sampleDataITS)
# Include functional guilds
funguild <- read.csv("guilds.csv", header=TRUE)
# Create final columns in tax_table to reflect Trophic Mode and Functional Guild
#tax_table(ITS)[,8] <- tax_table(ITS)[,6]=="Glomus"
tax_table(ITS)[,8] <- as.character(funguild$Trophic.Mode[match(rownames(tax_table(ITS)),funguild$X.OTU.ID)])
tax_table(ITS) <- cbind(tax_table(ITS), as.character(funguild$Guild[match(rownames(tax_table(ITS)),funguild$X.OTU.ID)]))
colnames(tax_table(ITS))[8:9] <- c("Trophic.Mode","Guild")
# Remove GCE70 because it contained two missing values (perc.N and perc.C)
rm.ind <- which(rownames(sample_data(ITS))=="F_GCE70")
sample_data(ITS) <- sample_data(ITS)[-rm.ind,]
# Remove low-abundance taxa and poorly-classified taxa
ITS.prune <- prune_taxa(taxa_sums(ITS)>10, ITS)
kingdom <- as.vector(data.frame(tax_table(ITS))$Kingdom)
tax.keep <- kingdom=="Fungi"
tax.keep[is.na(tax.keep)] <- FALSE
ITS.prune <- prune_taxa(tax.keep,ITS)
# Rarefaction to 8,000 reads
ITS.rare <- rarefy_even_depth(physeq=ITS.prune,sample.size=8000,rngseed=7,replace=FALSE,trimOTUs=TRUE,verbose=TRUE)
rm(ITS.prune)
rm(ITS)
# With this random seed, F_GCE97 is missing
ITS.amf <- subset_taxa(ITS.rare, Phylum=="Glomeromycota")
###################
#  Load 16S Data  #
###################
# Load data via phyloseq
BAC <- import_biom("otu_table_wTax_16S.biom",parseFunction=parse_taxonomy_greengenes)
sampleDataBAC <- import_qiime_sample_data("mapping_file_16S.txt")
# Convert int to factors where necessary
sampleDataBAC$treatment.group <- as.factor(sampleDataBAC$treatment.group)
sampleDataBAC$n <- as.factor(sampleDataBAC$n)
sampleDataBAC$co2 <- as.factor(sampleDataBAC$co2)
sampleDataBAC$heat <- as.factor(sampleDataBAC$heat)
sampleDataBAC$precip <- as.factor(sampleDataBAC$precip)
sampleDataBAC$perc.N <- as.numeric(as.character(sampleDataBAC$perc.N))
sampleDataBAC$perc.C <- as.numeric(as.character(sampleDataBAC$perc.C))
sampleDataBAC$plant.P.content <- as.numeric(as.character(sampleDataBAC$plant.P.content))
sampleDataBAC$CE.batch <- as.factor(sampleDataBAC$CE.batch)
# Correct for CE batches
col1 <- which(names(sampleDataBAC)=="perc.N")
col2 <- which(names(sampleDataBAC)=="C.N")
colrange <- names(sampleDataBAC)[col1:col2]
col3 <- which(names(sampleDataBAC)=="CE.batch")
sampleDataBAC <- correct_batch_means(sampleDataBAC, colrange, col3)
# Incorporate sampleData
sample_data(BAC) <- sampleDataBAC
rm(sampleDataBAC)
# Drop the final column in the taxonomy table, "Rank1"
rm.ind <- which(colnames(tax_table(BAC)) == "Rank1")
tax_table(BAC) <- tax_table(BAC)[,-rm.ind]
# Also, remove GCE70 because it contained two missing values (perc.N and perc.C)
rm.ind <- which(rownames(sample_data(BAC))=="B_GCE70")
sample_data(BAC) <- sample_data(BAC)[-rm.ind,]
# Remove low-abundance taxa and poorly-classified taxa
BAC.prune <- prune_taxa(taxa_sums(BAC)>10, BAC)
kingdom <- as.vector(data.frame(tax_table(BAC))$Kingdom)
tax.keep <- kingdom=="Bacteria"
tax.keep[is.na(tax.keep)] <- FALSE
BAC.prune <- prune_taxa(tax.keep,BAC)
# Rarefaction to 20,000 reads
BAC.rare <- rarefy_even_depth(physeq=BAC.prune,sample.size=20000,rngseed=7,replace=FALSE,trimOTUs=TRUE,verbose=TRUE)
rm(BAC.prune)
rm(BAC)
setwd("~/Documents/Stanford Coterm Year/Honors Thesis/R scripts")
setwd("~/Documents/Stanford Coterm Year/Honors Thesis/R Scripts")
setwd("~/Documents/Honors Thesis/R Scripts/boral")
ITS <- import_biom("otu_table_wTax_ITS.biom",parseFunction=parse_taxonomy_greengenes)
sampleDataITS <- import_qiime_sample_data("mapping_file_ITS.txt")
# Convert between int and factors where necessary
sampleDataITS$treatment.group <- as.factor(sampleDataITS$treatment.group)
sampleDataITS$n <- as.factor(sampleDataITS$n)
sampleDataITS$co2 <- as.factor(sampleDataITS$co2)
sampleDataITS$heat <- as.factor(sampleDataITS$heat)
sampleDataITS$precip <- as.factor(sampleDataITS$precip)
sampleDataITS$perc.N <- as.numeric(as.character(sampleDataITS$perc.N))
sampleDataITS$perc.C <- as.numeric(as.character(sampleDataITS$perc.C))
sampleDataITS$plant.P.content <- as.numeric(as.character(sampleDataITS$plant.P.content))
sampleDataITS$CE.batch <- as.factor(sampleDataITS$CE.batch)
# Correct for CE batches
col1 <- which(names(sampleDataITS)=="perc.N")
col2 <- which(names(sampleDataITS)=="C.N")
colrange <- names(sampleDataITS)[col1:col2]
col3 <- which(names(sampleDataITS)=="CE.batch")
sampleDataITS <- correct_batch_means(sampleDataITS, colrange, col3)
# Incorporate sampleData
sample_data(ITS) <- sampleDataITS
rm(sampleDataITS)
# Include functional guilds
funguild <- read.csv("guilds.csv", header=TRUE)
# Create final columns in tax_table to reflect Trophic Mode and Functional Guild
#tax_table(ITS)[,8] <- tax_table(ITS)[,6]=="Glomus"
tax_table(ITS)[,8] <- as.character(funguild$Trophic.Mode[match(rownames(tax_table(ITS)),funguild$X.OTU.ID)])
tax_table(ITS) <- cbind(tax_table(ITS), as.character(funguild$Guild[match(rownames(tax_table(ITS)),funguild$X.OTU.ID)]))
colnames(tax_table(ITS))[8:9] <- c("Trophic.Mode","Guild")
# Remove GCE70 because it contained two missing values (perc.N and perc.C)
rm.ind <- which(rownames(sample_data(ITS))=="F_GCE70")
sample_data(ITS) <- sample_data(ITS)[-rm.ind,]
# Remove low-abundance taxa and poorly-classified taxa
ITS.prune <- prune_taxa(taxa_sums(ITS)>10, ITS)
kingdom <- as.vector(data.frame(tax_table(ITS))$Kingdom)
tax.keep <- kingdom=="Fungi"
tax.keep[is.na(tax.keep)] <- FALSE
ITS.prune <- prune_taxa(tax.keep,ITS)
# Rarefaction to 8,000 reads
ITS.rare <- rarefy_even_depth(physeq=ITS.prune,sample.size=8000,rngseed=7,replace=FALSE,trimOTUs=TRUE,verbose=TRUE)
rm(ITS.prune)
rm(ITS)
# With this random seed, F_GCE97 is missing
ITS.amf <- subset_taxa(ITS.rare, Phylum=="Glomeromycota")
ITS.family <- tax_glom(ITS.amf, "Family")
ITS.family.sub <- subset_samples(ITS.family, quad==1)
X <- scale(apply(sample_data(ITS.family.sub)[,c(9:14,20:22,26)],2,as.numeric))
y <- matrix(t(otu_table(ITS.family.sub)), nrow=33)
boral(y=y, X=X, family="negative.binomial", num.lv=2, save.model=TRUE,
model.name="AMF_testmodel", seed=123, hypparams = c(100,20,100,20))
rm(ITS.amf)
rm(ITS.family)
rm(ITS.family.sub)
print("Test model (AMF) successful")
library(boral)
ITS.family <- tax_glom(ITS.amf, "Family")
ITS.family.sub <- subset_samples(ITS.family, quad==1)
X <- scale(apply(sample_data(ITS.family.sub)[,c(9:14,20:22,26)],2,as.numeric))
y <- matrix(t(otu_table(ITS.family.sub)), nrow=33)
boral(y=y, X=X, family="negative.binomial", num.lv=2, save.model=TRUE,
model.name="AMF_testmodel", seed=123, hypparams = c(100,20,100,20))
rm(ITS.amf)
rm(ITS.family)
rm(ITS.family.sub)
print("Test model (AMF) successful")
ITS.amf <- subset_taxa(ITS.rare, Phylum=="Glomeromycota")
btest <- boral(y=y, X=X, family="negative.binomial", num.lv=2, save.model=TRUE,
model.name="AMF_testmodel", seed=123, hypparams = c(100,20,100,20))
btest
names(btest)
library(mvabund)
spider
data(spider)
y <- spider$abun
X <- scale(spider$x)
n <- nrow(y); p <- ncol(y);
spider.fit.nb <- boral(y, family = "negative.binomial", num.lv = 2,
row.eff = "fixed", calc.ics = FALSE,
mcmc.control = example.mcmc.control)
summary(spider.fit.nb)
spider.fit.nb <- boral(y, family = "negative.binomial", num.lv = 2,
row.eff = "fixed", calc.ics = FALSE)
saveRDS(spider.fit.nb, "boral_spiderfit.rds")
setwd("~")
spider.fit.nb2 <- loadRDS("boral_spiderfit.rds")
spider.fit.nb2 <- readRDS("boral_spiderfit.rds")
summary(spider.fit.nb2)
ITS.family <- tax_glom(ITS.amf, "Family")
ITS.family <- tax_glom(ITS.rare, "Family")
ITS.rare
ITS.family
ITS.filter <- filter_taxa(ITS.family, function(x) sum(x > 0) > (0.2*length(x)), TRUE)
ITS.filter
setwd("~/Documents/Stanford Coterm Year/ICME Research/pathways_project/out_pathways")
library(dplyr)
library(reshape2)
library(ggplot2)
theme_set(theme_bw())
install.packages("dplyr")
install.packages("reshape2")
install.packages("ggplot2")
library(dplyr)
library(reshape2)
library(ggplot2)
theme_set(theme_bw())
paths <- read.table("pathways_ecoevo.txt", sep="\t", header=FALSE, stringsAsFactors=FALSE)
splitcols <- apply(paths,2,strsplit,',')
n_years <- length(splitcols)
course_long <- matrix(nrow = 0, ncol=2)
for(i in 1:n_years) {
unlisted <- unlist(splitcols[i])
n_rows <- length(unlisted)
add_to_long <- data.frame(rep(i, n_rows), unlisted)
course_long <- rbind(course_long, add_to_long)
}
colnames(course_long) <- c("qtr","course")
course_counts <- table(course_long)
course_sums <- colSums(course_counts)
course_props <- apply(course_counts, 1, function(x) {x / course_sums})
course_cumsums <- apply(course_props, 1, cumsum)
course_cumsums_long <- melt(course_cumsums)
colnames(course_cumsums_long) <- c("qtr","course","cumsum")
p1 <- ggplot(course_cumsums_long, aes(x=qtr, y=cumsum, col=course)) + geom_line()
ggsave("cumsum_plot.png", p1, device="png")
X11()
p1
dev.off()
plot.new
plot.new()
